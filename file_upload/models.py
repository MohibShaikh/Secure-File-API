from django.contrib.auth.models import AbstractUser, BaseUserManager, Group, Permission
from django.db import models
from django.conf import settings
from django.db import models
import hashlib
class CustomUserManager(BaseUserManager):
    def create_user(self, username, password=None, role="user", **extra_fields):
        """
        Creates and saves a User with the given username, password, and role.
        """
        if not username:
            raise ValueError("The Username field must be set")
        
        # Set default fields
        extra_fields.setdefault("is_active", True)
        
        # Create the user
        user = self.model(username=username, role=role, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, password=None, **extra_fields):
        """
        Creates and saves a superuser with the given username and password.
        """
        # Set superuser fields
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        extra_fields.setdefault("role", "admin")  # Set role to 'admin' for superusers
        
        return self.create_user(username, password, **extra_fields)

class User(AbstractUser):
    """
    Custom User model with a role field.
    """
    ROLE_CHOICES = (
        ('admin', 'Admin'),
        ('user', 'User'),
        ('guest', 'Guest'),
    )
    
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='user')
    
    # Override related_name for groups and user_permissions to avoid clashes
    groups = models.ManyToManyField(
        Group,
        related_name="file_upload_users",
        blank=True,
        verbose_name="groups",
        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
    )
    user_permissions = models.ManyToManyField(
        Permission,
        related_name="file_upload_users_permissions",
        blank=True,
        verbose_name="user permissions",
        help_text="Specific permissions for this user.",
    )

    objects = CustomUserManager()

    def __str__(self):
        return self.username
    
class SecureFile(models.Model):
    owner = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    file = models.FileField(upload_to='uploads/')
    encrypted_name = models.CharField(max_length=255, blank=True, null=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        """
        Save the model instance to the database.

        If the `encrypted_name` is not set, it will be generated by hashing the
        original filename with SHA-256. The `super().save()` method is then
        called to save the instance to the database.

        :param args: Arguments to be passed to `super().save()`.
        :param kwargs: Keyword arguments to be passed to `super().save()`.
        """
        if not self.encrypted_name:
            self.encrypted_name = hashlib.sha256(self.file.name.encode()).hexdigest()
        super().save(*args, **kwargs)


